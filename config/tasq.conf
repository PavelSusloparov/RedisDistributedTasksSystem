tasq_service_log: /var/log/nb/redis/tasq.log
monitor_log: /var/log/nb/redis/monitor.log

log_level: &default_log_level INFO
tasq_log_level: *default_log_level
monitor_log_level: *default_log_level

tasks_config:
## General configuration

## Default task parameters.

# Parameter from this section could be overridden for any particular
# task by adding corresponding settings without 'default_' prefix to the
# task description. Anotherw option is to provide configuration for a task
# in run-time by adding class member with the same name.

# If 'downtime_mode' is enable('+'), worker reports about self inactivity.
# Tasq tries to retrieve results from input queue for
# 'input_polling_timeout' seconds.
# If worker gets 'None' task 'downtime_limit' times,
# info message will be logged.
  default_downtime_mode: '-'
  default_downtime_limit: 5
  default_input_polling_timeout: 1

# While a task is being processed, Tasq tries to retrieve results
# from result queue for 'result_polling_interval'(unit in seconds),
# and if they are not ready, or an error occurs, the system retries
# trying 'result_retries' times.
  default_result_polling_interval: 10
  default_result_retries: 3

# Tasks are processed in "reliable" mode:
#   * if "guaranteed" flag is set
#   * while processing exceeds "backup_task_timeout"
#   * until backup_retries attempts is made
# Tasq throws an error message if unable to handle reliable task.
# By default tasks are not reliable.
  default_guaranteed: '-'
  default_backup_retries: 3
  default_backup_task_timeout: 5

## Predefined task types

# All fields except 'workers' are optional.
# Number of Tasq workers that serves given task is specified for each
# host involved. If a task is not declared in this file, and does not provide
# runtime configuration, it's assumed to have a single worker on localhost.

# TestTask serves as an example of task declaration.
#  redis.tasq.test_tasks.TestTask:
#    workers:
#      - ['tns-tasks1', 3]
#    guaranteed: '+'
#    backup_task_timeout: 2
#    backup_attempts_limit: 5
#    result_pooling_interval: 1
#    result_retries: 20

# Traffic Notify Service 2.0 task types
  tesla.traffic.tns.tasks.FlowTask:
    workers:
      - ['tns-tasks1', 1]
      - ['tns-tasks2', 1]
      - ['tns-tasks3', 1]
      - ['tns-tasks4', 1]
  tesla.traffic.tns.tasks.IncidentTask:
    workers:
      - ['tns-tasks1', 1]
      - ['tns-tasks2', 1]
      - ['tns-tasks3', 1]
      - ['tns-tasks4', 1]
  tesla.traffic.tns.tasks.NotifyTask:
    workers:
      - ['tns-tasks1', 1]
      - ['tns-tasks2', 1]
      - ['tns-tasks3', 1]
      - ['tns-tasks4', 1]
  tesla.traffic.tns.tasks.ClosuresTask:
    workers:
      - ['tns-tasks1', 1]
      - ['tns-tasks2', 1]
      - ['tns-tasks3', 1]
      - ['tns-tasks4', 1]
  tesla.traffic.tns.tasks.SessionTask:
    workers:
      - ['tns-tasks1', 1]
      - ['tns-tasks2', 1]
      - ['tns-tasks3', 1]
      - ['tns-tasks4', 1]
  tesla.traffic.tns.tasks.HistoricalDateTask:
    workers:
      - ['tns-tasks1', 1]
      - ['tns-tasks2', 1]
      - ['tns-tasks3', 1]
      - ['tns-tasks4', 1]
  tesla.traffic.tns.tasks.HistoricalBasespeedsTask:
    workers:
      - ['tns-tasks1', 1]
      - ['tns-tasks2', 1]
      - ['tns-tasks3', 1]
      - ['tns-tasks4', 1]
  tesla.traffic.tns.tasks.HistoricalTimezonesTask:
    workers:
      - ['tns-tasks1', 1]
      - ['tns-tasks2', 1]
      - ['tns-tasks3', 1]
      - ['tns-tasks4', 1]
